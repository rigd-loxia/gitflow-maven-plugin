import org.codehaus.plexus.util.FileUtils;

try {
    new File(basedir, "gitignorefile").renameTo(new File(basedir, ".gitignore"));

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " init");
    p.waitFor();

    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.email 'a@a.aa'");
    p.waitFor();
    Process p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " config user.name 'a'");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m init");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " branch hotfix/1.0.1");
    p.waitFor();

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " checkout hotfix/1.0.1");
    p.waitFor();

    for (String fileName : new String[] {"pom.xml", "child1/pom.xml", "child2/pom.xml"}) {
        File pomfile = new File(basedir, fileName);
        String pomfilestr = FileUtils.fileRead(pomfile, "UTF-8");
        pomfilestr = pomfilestr.replaceAll("1.0", "1.0.1-SNAPSHOT");
        FileUtils.fileWrite(basedir + "/" + fileName, "UTF-8", pomfilestr);
    }

    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " add .");
    p.waitFor();
    p = Runtime.getRuntime().exec("git --git-dir=" + basedir + "/.git --work-tree=" + basedir + " commit -m next");
    p.waitFor();

} catch (Exception e) {
    e.printStackTrace();
    return false;
}
return true;
